{"version":3,"file":"TimeVM.js","sources":["../src/commands.js","../src/process.js","../src/scheduler.js","../src/vm.js","../src/gibberish.js","../src/index.js"],"sourcesContent":["// # Commands\nconst isPattern = Array.isArray\nconst peek = (stack) => stack[stack.length - 1]\n\n// Given a commands object, expand the aliases\nexport function expandAliases(commands) {\n  Object.keys(commands).forEach(cmd => {\n    const op = commands[op];\n    if (typeof op === \"string\") {\n      commands[cmd] = commands[op];\n    }\n  });\n}\n\n// ## Core\n\n// This are the core operations: execute instructions, modify\n// process time and context variables\n\n// | Name | Description | Example |\n// |------|-------------|---------|\n// | **@dup** | Duplicate item (so you can use it twice) | `10,@dup` |\n// | **@execute** | Execute an instruction | `10,'dup','@execute'` |\n// | **@** | Alias of @execute | `10,'dup','@'` |\n// | **@let** | Assign a value to the local context | `10,'repetitions',@let` |\n// | **@set** | Assign a value to the global context | `10,'parts',@set` |\n// | **@get** | Push the value of a variable into the stack | `'repetitions',@get` |\n// | **@wait** | Wait an amount of time | `1,@wait` |\n// | **@fork** | Fork | `@fork, [0.5, '@wait', '@kick']` |\nexport const core = {\n  \"@dup\": ({ stack }) => stack.push(peek(stack)),\n  \"@execute\": ({ stack }, { error }) => {\n    const instr = stack.pop();\n    if (typeof instr !== \"string\")\n      error(\"Trying to execute something that is not a string: \" + instr);\n    else\n      stack.push(\"@\" + instr);\n  },\n  \"@\": \"@execute\",\n\n  \"@let\": ({ stack, context }) => context.let(stack.pop(), stack.pop()),\n  \"@set\": ({ stack, context }) => context.set(stack.pop(), stack.pop()),\n  \"@get\": ({ stack, context }) => stack.push(context.get(stack.pop())),\n\n  \"@wait\": proc => proc.wait(Math.abs(Number(proc.stack.pop()))),\n\n  \"@stop-all\": (proc, { stop }) => stop(),\n\n  \"@fork\": (proc, { error, fork }) => {\n    const { instructions } = proc;\n    const pattern = instructions.pop();\n\n    if (!isPattern(pattern))\n      error(\"Fork error - not valid pattern: \" + pattern);\n    else\n      fork(proc, pattern);\n  }\n};\n\n// ## Repeat and loop\n\n// | Name | Description | Example |\n// |------|-------------|---------|\n// | **@repeat** | Repeat a pattern | `4, @repeat, ['@kick', 0.5, '@wait']` |\nexport const repetition = {\n  \"@repeat\": ({ stack, instructions }) => {\n    const repetitions = stack.pop();\n    const pattern = peek(instructions);\n    if (!isPattern(pattern)) throw Error(\"Can't repeat: \" + pattern);\n    for (let i = 1; i < repetitions; i++) {\n      instructions.push(pattern);\n    }\n  },\n  \"@forever\": ({ instructions }) => {\n    const pattern = peek(instructions);\n    if (!isPattern(pattern)) throw Error(\"Can't forover: \" + pattern);\n    if (pattern.length) {\n      instructions.push(\"@forever\");\n      instructions.push(pattern);\n    }\n  },\n  \"@loop\": proc => {\n    const { instructions, scheduler } = proc;\n    const pattern = instructions.pop();\n    if (!scheduler) throw Error(\"Can't loop without an scheduler\");\n    if (!isPattern(pattern))\n      throw Error(\"Can't loop something is not a pattern: \" + pattern);\n    scheduler.fork(proc, [\"@forever\", pattern]);\n  }\n};\n\n// ## Iteration and lists\n// | Name | Description | Example |\n// |------|-------------|---------|\n// | **@iter** | Iterate a pattern | `[[\"@iter\", [0.3, 1]], \"@set-amp\"]` |\nconst lists = {\n  \"@iter\": ({ instructions }) => {\n    const pattern = instructions.pop()\n    if (!isPattern(pattern) || !pattern.length) error(\"Can't iterate:\", pattern)\n    else {\n      // Rotates the pattern and plays the first item only each time\n      // remove '1st' item, schedule, then push to back:\n      const first = pattern.splice(0, 1)\n      instructions.push(first)\n      pattern.push(first)\n    }\n  }\n}\n\n// ## Arithmetic\n\n// A generic operation that pops one value and pushes on result\nconst op1 = fn =>\n  ({ stack }) => {\n    stack.push(fn(stack.pop()));\n  };\n\n// A generic operation that pops two values and pushes one result\nconst op2 = fn =>\n  ({ stack }) => {\n    stack.push(fn(stack.pop(), stack.pop()));\n  };\n\n// a modulo operation that handles negative n more appropriately\n// e.g. wrap(-1, 3) returns 2\n// see http://en.wikipedia.org/wiki/Modulo_operation\n// see also http://jsperf.com/modulo-for-negative-numbers\nconst wrap = (a, b) => (a % b + b) % b;\n\nexport const arithmetic = {\n  \"@+\": op2((a, b) => a + b),\n  add: \"@+\",\n  \"@-\": op2((a, b) => a - b),\n  \"@sub\": \"@-\",\n  \"@*\": op2((a, b) => a * b),\n  \"@mul\": \"@*\",\n  \"@/\": op2((a, b) => b === 0 ? 0 : a / b),\n  \"@div\": \"@/\",\n  \"@%\": op2((a, b) => b === 0 ? 0 : wrap(a, b)),\n  \"@wrap\": \"@%\",\n  \"@mod\": op2((a, b) => b === 0 ? 0 : a % b),\n  \"@neg\": op1(a => -a)\n};\n\n// ## Conditionals\n// _should they return 1 and 0 instead of bools?_\n\nexport const logic = {\n  \"@cond\": ({ stack, instructions }) => {\n    const test = stack.pop();\n    // this is the pattern to execute if the test passes\n    const success = instructions.pop();\n    // the next pattern is the \"else\" part\n    if (test) {\n      // remove the \"else\" part\n      instructions.pop();\n      instructions.push(success);\n    }\n  },\n  \"@>\": op2((a, b) => a > b),\n  \"@>=\": op2((a, b) => a >= b),\n  \"@<\": op2((a, b) => a < b),\n  \"@<=\": op2((a, b) => a <= b),\n  \"@==\": op2((a, b) => a === b),\n  \"@!=\": op2((a, b) => a !== b),\n  \"@!\": op1(a => !a),\n  \"@not\": \"@!\",\n  \"@&&\": op2((a, b) => a && b),\n  \"@and\": \"@&&\",\n  \"@||\": op2((a, b) => a || b),\n  \"@or\": \"@||\"\n};\n\n// ## Debug operations\n\n// | Name | Description | Example |\n// |------|-------------|---------|\n// | **@print** | Print the last value of the stack | `10,@print` |\nexport const debug = {\n  \"@print\": (proc, { log }) => {\n    const stack = proc.stack;\n    const last = stack.length ? stack.pop() : \"<Empty Stack>\";\n    log(\"@print\", last, \"(id, time)\", proc.id, proc.time);\n  }\n};\n\nexport const all = Object.assign({},\n  core, repetition, lists, arithmetic, logic, debug\n)\n","// # Process\n\nconst isCommand = o => typeof o === \"string\" && o[0] === \"@\";\nconst isProgram = Array.isArray;\nlet procId = 1;\n\n// Processes are the principal computation unit. It departures from typical\n// processes in that it model the concept of time\nexport class Process {\n  constructor(program, context, time, rate) {\n    this.id = \"proc-\" + procId++;\n    // a stack of values\n    this.stack = [];\n    // the instructions are stored in a stack (in reverse order)\n    this.instructions = program ? [program] : [];\n    // the context is used to store variables with scope\n    this.context = context ? context : new Context();\n    // the current time\n    this.time = typeof time === \"number\" ? time : 0;\n    // how fast time passes\n    this.rate = typeof rate === \"number\" ? rate : 1;\n  }\n\n  // wait an amount of time\n  wait (time) {\n    this.time += this.rate * time\n  }\n\n  // To run an instruction, the process uses a _commands_ object (a map from\n  // a instruction to a function) and an actions object (that will be exposed\n  // to that function an uses as communication mechanism with the outside world)\n  // The `step` function runs the next instruction of the process\n  step(commands, actions) {\n    const { instructions } = this;\n    if (instructions.length) {\n      const instr = instructions.pop();\n      if (instr === null || instr === undefined) {\n        // ignore\n      } else if (isProgram(instr)) {\n        // if it's program, and since the instructions are stored into an stack,\n        // we need add to the program instructions in reverse order\n        for (let i = instr.length - 1; i >= 0; i--) {\n          instructions.push(instr[i]);\n        }\n      } else if (isCommand(instr)) {\n        const operation = commands[instr];\n        if (typeof operation === \"function\") operation(this, actions);\n        else actions.error(\"Instruction '\" + instr + \"' not recognized.\");\n      } else {\n        // if it's a value, push it into the stack\n        this.stack.push(instr);\n      }\n    }\n  }\n\n  // the `resume` function run all the instructions until time is reached\n  resume(commands, actions, time = Infinity, limit = 10000) {\n    const { instructions } = this;\n    while (--limit > 0 && this.time < time && instructions.length) {\n      this.step(commands, actions);\n    }\n    if (limit === 0)\n      actions.error(\"Run limit reached. Probably an infinite loop.\");\n    return instructions.length > 0;\n  }\n}\n\n// ## Context\n\n// A context is a hierarchical structure to store values with scope\nexport class Context {\n  constructor(parent, local) {\n    this.parent = parent;\n    this.local = local ? Object.assign({}, local) : undefined;\n  }\n  // get a value from a context\n  get(id) {\n    let target = this;\n    while (target.value(id) === undefined && target.parent) {\n      target = target.parent;\n    }\n    return target.value(id);\n  }\n\n  // set a value from a context\n  set(id, value) {\n    let target = this;\n    while (target.value(id) === undefined && target.parent) {\n      target = target.parent;\n    }\n    target.let(id, value);\n  }\n  // get a value from the local scope of a context\n  value(id) {\n    return this.local ? this.local[id] : undefined;\n  }\n\n  // set a value into the local scope of a context\n  let(id, value) {\n    if (!this.local) this.local = {};\n    this.local[id] = value;\n  }\n}\n","// # Scheduler\nimport { Process, Context } from './process'\n\nexport class Scheduler {\n  constructor() {\n    this.procs = []; // the procs are inverse ordered by time\n    this.time = 0;\n    // the action are exposed to be used in commands\n    this.actions = {\n      schedule: this.schedule.bind(this),\n      fork: this.fork.bind(this),\n      stop: this.stop.bind(this)\n    }\n  }\n\n  schedule(ctxData, program, delay = 0, rate = 1) {\n    const time = this.time + delay;\n    // Create a context with the given data\n    const context = new Context(null, ctxData)\n    this.add(new Process(program, context, time, rate));\n  }\n\n  fork(proc, program, delay = 0, rate) {\n    const time = this.time + delay;\n    if (!rate) rate = proc.rate;\n    // Create a child context\n    const context = new Context(proc.context)\n    return this.add(new Process(program, proc.context, time, rate));\n  }\n\n  // run the scheduler for the given time (Infinity if not specified)\n  resume(commands, actions, dur = Infinity, limit = 10000) {\n    const { procs } = this\n    if (procs.length === 0) return false\n    const time = this.time + dur\n    while (--limit > 0 && this.nextTime() < time) {\n      const proc = procs.pop();\n      if (proc.resume(commands, actions, time)) {\n        // the proc has more operations, re-schedule\n        this.add(proc);\n      }\n    }\n    this.time = time;\n    return procs.length > 0;\n  }\n\n  stop () {\n    this.procs.clear()\n  }\n\n  // add a process to the scheduler\n  add(proc) {\n    const { procs } = this\n\n    if (procs.length === 0) {\n      // no need to sort: just push it\n      procs.push(proc);\n    } else {\n      // procs are sorted on insertion\n      let i = procs.length - 1;\n      let p = procs[i];\n      while (p && p.time <= proc.time) {\n        i--;\n        p = procs[i];\n      }\n      procs.splice(i + 1, 0, proc);\n    }\n    return proc;\n  }\n\n  // get time of the next process\n  nextTime() {\n    const len = this.procs.length\n    return len ? this.procs[len - 1].time : Infinity;\n  }\n}\n","// # Virtual Machine\n\nimport { all } from \"./commands\";\nimport { Scheduler } from \"./scheduler\";\n\nexport const defaultActions = {\n  log: console.log.bind(console),\n  error: console.error.bind(console)\n};\n\nexport class VM {\n  // plugins is an array of plugins: objects with `{ commands, actions }`\n  constructor(plugins = []) {\n    this.scheduler = new Scheduler();\n    this.initialContext = { amp: 0.8, freq: 440 };\n\n    // commands are a map of instructions to commands with the form:\n    // `{ '@instruction': (proc, actions) => ... }`\n    this.commands = {};\n    // actions are available to the commands\n    this.actions = Object.assign({}, defaultActions);\n    // the scheduler itself is a plugin (has commands and actions)\n    this.usePlugin(this.scheduler);\n    plugins.forEach(plugin => this.usePlugin(plugin));\n  }\n\n  run(program, delay, rate) {\n    this.scheduler.schedule(this.initialContext, program, delay, rate);\n  }\n\n  // advance the virtual machine by a time ammount\n  tick(duration) {\n    this.scheduler.resume(this.commands, this.actions, duration);\n  }\n\n  // A plugin is an object with two properties:\n  // - commands: a map of instructions to commands\n  // - actions: a map of actions names to actions\n  usePlugin(plugin) {\n    Object.assign(this.commands, plugin.commands);\n    Object.assign(this.actions, plugin.actions);\n  }\n}\n","let bpm = 100;\nlet sampleRate = null;\nlet bpm2bpa = null;\nlet vms = [];\nlet instruments = null;\nlet commands = null;\n\nconst instrumentCmds = {\n  \"@pluck\": ({ stack }, { note }) => note(\"\")\n};\n\nexport function gibberish(Gibberish, vm) {\n  if (arguments.length === 1) return vm => gibberish(Gibberish, vm);\n\n  if (sampleRate === null) {\n    Gibberish.init();\n    sampleRate = Gibberish.context.sampleRate;\n    bpm2bpa = 1 / (60 * sampleRate);\n    instruments = createInstruments(Gibberish, instConfig);\n    commands = createCommands(instruments, cmdConfig);\n    Gibberish.sequencers.push(sequencer);\n  }\n\n  vms.push(vm);\n  vm.usePlugin({ actions: instruments, commands });\n  return Gibberish;\n}\n\n// The Gibberish sequencer that controlls all\nconst sequencer = {\n  tick() {\n    const len = vms.length;\n    if (len === 0) return;\n    const dur = bpm * bpm2bpa;\n    for (let i = 0; i < len; i++) {\n      vms[i].tick(dur);\n    }\n  }\n};\n\n// This is the instruments configuration\nconst instConfig = [\n  [\"kick\", \"Kick\", { decay: 0.2 }],\n  [\"snare\", \"Snare\", { snappy: 1.5 }],\n  [\"hat\", \"Hat\", { amp: 1.5 }],\n  [\"conga\", \"Conga\", { amp: 0.25, freq: 400 }],\n  [\"tom\", \"Tom\", { amp: 0.25, freq: 400 }],\n  [\"pluck\", \"PolyKarplusStrong\", { maxVoices: 32 }],\n  [\n    \"bass\",\n    \"MonoSynth\",\n    {\n      attack: 44,\n      decay: 0.25, // FIXME(danigb) -- it was: Gibberish.Time.beats(0.25),\n      filterMult: 0.25,\n      octave2: 0,\n      octave3: 0\n    }\n  ]\n];\n// Given a instruments configuration, create the Giberish instruments\nfunction createInstruments(G, config) {\n  return config.reduce(\n    (insts, [name, type, params]) => {\n      insts[name] = new G[type](params).connect();\n      return insts;\n    },\n    {}\n  );\n}\n\n// ## Commands\n\n// A trigger function receives the instrument and the parameters\nconst tr1 = (inst, amp) => {\n  inst.amp = amp\n  inst.note()\n}\n// trigger an instrument with 2 params\nconst tr2 = (inst, amp, freq) => {\n  inst.amp = amp\n  inst.freq = freq\n  inst.note()\n}\n// the bass is only triggered if the frequency is positive\n// the bass is only triggered if the frequency is positive\nconst trBass = (bass, amp, freq) => {\n  if (freq > 0) bass.note(amp, freq);\n};\n// trigger the pluck requires adjust dump and compensate volume\nconst trPluck = (strings, amp, freq) => {\n  console.log(\"PLUCK\", amp, freq, sampleRate);\n  if (freq > 0) {\n    // This is not in any way accurate, just a hack to make @set-dur do something semi-meaningful\n    strings.damping = 1 - -6 / Math.log(freq / sampleRate);\n    // Strings by default seem too quiet:\n    strings.note(freq, amp * amp * 2);\n  }\n};\n\n// ## Instrument commands\n\n// | Name | Description | Example |\n// |------|-------------|---------|\n// | **@pluck** | Trigger a string sound | `@pluck` |\n// | **@pluck-note** | Trigger a string sound passing parameters | `freq, amp, @pluck` |\n// | **@bass** | Trigger a bass sound | `@bass` |\n// | **@bass-note** | Trigger a bass sound passing parameters | `freq, amp, @bass` |\nconst cmdConfig = {\n  pluck: [\"amp\", \"freq\", trPluck],\n  bass: [\"amp\", \"freq\", trBass],\n  kick: [\"amp\", null, tr1],\n  snare: [\"amp\", null, tr1],\n  hat: [\"amp\", null, tr1],\n  conga: [\"amp\", \"freq\", tr2],\n  tom: [\"amp\", \"freq\", tr2]\n};\n\nfunction createCommands(instruments, config) {\n  return Object.keys(config).reduce(\n    (cmds, name) => {\n      const cmdConfig = config[name];\n      const inst = instruments[name];\n      cmds[\"@\" + name] = fromScope(inst, cmdConfig);\n      cmds[\"@\" + name + \"-note\"] = fromStack(inst, cmdConfig);\n      return cmds;\n    },\n    {}\n  );\n}\n\n// Create an instrument command that get the parameters from context\n// example: `['@pluck']`\nfunction fromScope(inst, [name1, name2, trigger]) {\n  return ({ context }) => trigger(inst, context.get(name1), context.get(name2));\n}\n\n// Create an instrument command that get the parameters from the stack\n// example: `[0.2, 05, '@pluck-note']`\nfunction fromStack(inst, [name1, name2, trigger]) {\n  return ({ stack }) =>\n    trigger(inst, stack.pop(), name2 ? stack.pop() : undefined);\n}\n","// # Audio Virtual Machine\n\n// The main purpose of the virtual machine is to run processes concurrently\n\n// ## Architecture Overview\n\n// A **scheduler** is a collection of processes. Each **process** mantains\n// an internal time value that can be modified.\n\nimport { VM } from './vm'\nimport { all } from './commands'\nimport { gibberish } from './gibberish'\n\n// ## API\n\nexport function init (Gibberish, ...plugins) {\n  plugins = [{ commands: all }].concat(plugins)\n  // Create the virtual machine\n  const vm = new VM(plugins)\n  // Init the audio driver\n  gibberish(Gibberish, vm)\n  // Return vm's run function\n  return vm.run.bind(vm)\n}\n"],"names":["isPattern","Array","isArray","peek","stack","length","core","push","error","instr","pop","context","let","set","get","proc","wait","Math","abs","Number","stop","fork","instructions","pattern","repetition","repetitions","Error","i","scheduler","lists","first","splice","op1","fn","op2","wrap","a","b","arithmetic","logic","test","success","debug","log","last","id","time","all","Object","assign","isCommand","o","isProgram","procId","Process","program","rate","Context","commands","actions","undefined","operation","Infinity","limit","step","parent","local","target","value","Scheduler","procs","schedule","bind","ctxData","delay","add","dur","nextTime","resume","clear","p","len","defaultActions","console","VM","plugins","initialContext","amp","freq","usePlugin","forEach","plugin","duration","bpm","sampleRate","bpm2bpa","vms","instruments","gibberish","Gibberish","vm","arguments","init","createInstruments","instConfig","createCommands","cmdConfig","sequencers","sequencer","tick","decay","snappy","maxVoices","G","config","reduce","insts","name","type","params","connect","tr1","inst","note","tr2","trBass","bass","trPluck","strings","damping","keys","cmds","fromScope","fromStack","name1","name2","trigger","concat","run"],"mappings":"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"}